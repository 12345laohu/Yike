<?php


namespace _;



use Teacher\unitLesson;

class boardTest extends \PHPUnit_Framework_TestCase
{
    private $platform;
    private $mysql;
    private $srv;
    private $dao;

    private $tuid;
    private $lessonId;

    public function __construct($name = null, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->mysql = data::mysql();
        $this->srv = servLessonBoard::sole($this->platform);
        $this->dao = dataLessonBoard::sole($this->platform);
    }

    public function setup()
    {
        parent::setUp();
        $this->tuid = \Teacher\dataUser::sole($this->platform)->append(3, 'teacher', 0);
        $lessonSn = $this->createLesson($this->tuid);
        $this->lessonId = servLesson::sole($this->platform)->sn2id($lessonSn);

        $fields = ['id', '_id', 'uid', 'lesson_id', 'i_type', 'message', 'weight', 'tms_create'];
        $values = [
            [1, 0, 1, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '1', 10, '2017-01-01'],
            [2, 0, 2, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '2', 9, '2017-01-02'],
            [3, 0, 3, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '3', 8, '2017-01-03'],
            [4, 1, 4, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '4', 7, '2017-01-04'],
            [5, 4, 5, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '5', 6, '2017-01-05'],
            [6, 0, 6, $this->lessonId, dataLessonBoard::TYPE_ARGUE, '6', 6, '2017-01-06'],
        ];
        $this->mysql->insertBatch(dataLessonBoard::TABLE, $fields, $values);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->mysql->run("truncate table lesson_board");
    }


    public static function tearDownAfterClass()
    {
        $mysql = data::mysql();
        $tables = $mysql->run("show tables")->fetchAll(null, 0);
        foreach ($tables as $table) {
            $mysql->run("truncate table `$table`");
        }
    }


    public function createLesson($tuid)
    {
        $unitLesson = new unitLesson();
        $unitLesson->iForm = 1;
        $unitLesson->price = 0;
        $unitLesson->quota = 0;
        $unitLesson->title = 'lesson';
        $unitLesson->category = '';
        $lessonSn = \Teacher\servLesson::sole($this->platform)->create($tuid, $unitLesson);
        $this->assertNotEmpty($lessonSn);
        return $lessonSn;
    }

    public function testComment()
    {
        $message = unitBoardMessage::inst('text');
        $message->content = 'hello';
        $cursor = servLessonBoard::sole($this->platform)->comment('before', $this->lessonId, 2, $message);
        $this->assertNotEmpty($cursor);
        return $cursor;
    }

    public function testSlice()
    {
        $srvBoard = servLessonBoard::sole($this->platform);

        $res = $srvBoard->slice('before', $this->lessonId, servLessonBoard::SORT_BY_TIME_DESC, '0-0-0', 2);
        $uids = array_column($res, 'message');
        $this->assertSame(['6','5'], $uids);

        $cursor = end($res)['cursor'];
        $res = $srvBoard->slice('before', $this->lessonId, servLessonBoard::SORT_BY_TIME_DESC, $cursor, 2);
        $uids = array_column($res, 'message');
        $this->assertSame(['4','3'], $uids);

        $res = $srvBoard->slice('before', $this->lessonId, servLessonBoard::SORT_BY_WEIGHT, '0-0-0', 3);
        $uids = array_column($res, 'message');
        $this->assertSame(['1','2','3'], $uids);
    }

    public function testLike()
    {
        $cursor = "1--";

        $res = $this->srv->like($cursor, 1);
        $this->assertSame([
            'isLike' => true,
            'liked' => 1
        ], $res, "one like");

        $res = $this->srv->like($cursor, 2);
        $this->assertSame([
            'isLike' => true,
            'liked' => 2
        ], $res, "two like");

        $res = $this->srv->like($cursor, 1);
        $this->assertSame([
            'isLike' => false,
            'liked' => 1
        ], $res, "cancel like");
    }


}
