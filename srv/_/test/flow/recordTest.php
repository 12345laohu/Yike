<?php


namespace _;


use Teacher\unitLesson;

class recordTest extends \PHPUnit_Framework_TestCase
{
    private $platform;
    private $mysql;
    private $srv;
    private $dao;

    protected $lessonSn;
    protected $lessonId;

    public function __construct($name = null, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->mysql = data::mysql();
        $this->srv = servLesson::sole($this->platform);
        $this->dao = dataLessonRecord::sole($this->platform);
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $unitLesson = new unitLesson();
        $unitLesson->iForm = 1;
        $unitLesson->price = 0;
        $unitLesson->quota = 0;
        $unitLesson->title = 'lesson';
        $unitLesson->category = '';
        $tuid = 1;
        $this->lessonSn = $lessonSn = \Teacher\servLesson::sole($this->platform)->create($tuid, $unitLesson);
        $this->lessonId = $lessonId = $this->srv->sn2id($lessonSn);

        $fields = ['lesson_id', 'i_type', 'from_uid', 'content'];
        $values = [
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c1"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c2"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c3"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c4"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c5"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c6"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c7"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c8"'],
            [$lessonId, dataLessonRecord::FORM_TIM, 1, '"c9"'],
        ];
        $this->mysql->insertBatch(dataLessonRecord::TABLE, $fields, $values);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->mysql->run("truncate table ".dataLessonRecord::TABLE);
    }

    public function testSlice()
    {
        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 0, data::TOWARD_NEXT, 3);
        $exp = ["c1", "c2", "c3"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "from head start");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 0, data::TOWARD_PREV, 3);
        $exp = ["c7", "c8", "c9"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "from tail end");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 3, data::TOWARD_NEXT, 3);
        $exp = ["c4", "c5", "c6"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "from head middle");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 7, data::TOWARD_PREV, 3);
        $exp = ["c4", "c5", "c6"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "from tail middle");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 5, data::TOWARD_NEAR, 5);
        $exp = ["c3","c4", "c5", "c6","c7"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "from near");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 5, data::TOWARD_PREV, -1);
        $exp = ["c1","c2", "c3", "c4"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "to head");

        $res = $this->srv->sliceRecord(dataLessonRecord::FORM_TIM, $this->lessonSn, 5, data::TOWARD_NEXT, -1);
        $exp = ["c6", "c7", "c8", "c9"];
        $act = array_column($res, 'content');
        $this->assertSame($exp, $act, "to tail");
    }


}
